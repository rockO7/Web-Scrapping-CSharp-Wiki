using HtmlAgilityPack;
using System;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web;
using System.Collections.Generic;

class Program
{
    static async Task Main(string[] args)
    {
        var url = "https://en.wikipedia.org/wiki/Seattle"; // Replace with the URL you want to extract data from
        var httpClient = new HttpClient();
        var html = await httpClient.GetStringAsync(url);

        var htmlDoc = new HtmlDocument();
        htmlDoc.LoadHtml(html);

        // Specify the important section headings you want to extract
        var importantHeadings = new List<string>
        {
            "Utilities"
        };

        foreach (var heading in importantHeadings)
        {
            var sectionHeading = htmlDoc.DocumentNode.SelectSingleNode($"//span[@class='mw-headline'][text()='{heading}']");
            if (sectionHeading != null)
            {
                Console.WriteLine($"### {HttpUtility.HtmlDecode(sectionHeading.InnerText.Trim())}");

                var sectionContent = sectionHeading.ParentNode.SelectSingleNode("following-sibling::p");
                var paragraphCount = 0; // Track the number of paragraphs

                while (sectionContent != null && paragraphCount < 2) // Limit to 2 paragraphs
                {
                    var limitedContent = LimitString(sectionContent.InnerText.Trim(), 1500); // Set your desired character limit here
                    Console.WriteLine(HttpUtility.HtmlDecode(limitedContent));
                    sectionContent = sectionContent.SelectSingleNode("following-sibling::p");
                    paragraphCount++;
                }

                var table = sectionHeading.ParentNode.SelectSingleNode("following-sibling::table");
                if (table != null)
                {
                    var rows = table.SelectNodes(".//tr");
                    if (rows != null)
                    {
                        foreach (var row in rows)
                        {
                            var cells = row.SelectNodes(".//td");
                            if (cells != null)
                            {
                                foreach (var cell in cells)
                                {
                                    var limitedCellContent = LimitString(cell.InnerText.Trim(), 500); // Set your desired character limit here
                                    Console.Write(HttpUtility.HtmlDecode(limitedCellContent) + "\t");
                                }
                                Console.WriteLine();
                            }
                        }
                    }
                }
            }
        }
    }

    static string LimitString(string text, int maxLength)
    {
        if (text.Length <= maxLength)
            return text;
        else
            return text.Substring(0, maxLength - 3) + "...";
    }
}
